/-
Copyright (c) 2024 Lawrence Wu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Lawrence Wu
-/
import Mathlib.MeasureTheory.Group.Measure
import Mathlib.MeasureTheory.Integral.Asymptotics
import Mathlib.MeasureTheory.Integral.IntegrableOn
import Mathlib.MeasureTheory.Integral.SetIntegral
import Mathlib.MeasureTheory.Function.LocallyIntegrable
import PrimeNumberTheoremAnd.Mathlib.Analysis.Asymptotics.Uniformly
import PrimeNumberTheoremAnd.Mathlib.MeasureTheory.Integral.IntegrableOn
import PrimeNumberTheoremAnd.Mathlib.MeasureTheory.Function.LocallyIntegrable
import PrimeNumberTheoremAnd.Mathlib.MeasureTheory.Group.Arithmetic

/-!
# Bounding of integrals by asymptotics

We establish integrability of `f` from `f = O(g)`.

## Main results

* `Asymptotics.IsBigO.integrableAtFilter`: If `f = O[l] g` on measurably generated `l`,
  `f` is strongly measurable at `l`, and `g` is integrable at `l`, then `f` is integrable at `l`.
* `MeasureTheory.LocallyIntegrable.integrable_of_isBigO_cocompact`: If `f` is locally integrable,
  and `f =O[cocompact] g` for some `g` integrable at `cocompact`, then `f` is integrable.
* `MeasureTheory.LocallyIntegrable.integrable_of_isBigO_atBot_atTop`: If `f` is locally integrable,
  and `f =O[atBot] g`, `f =O[atTop] g'` for some `g`, `g'` integrable `atBot` and `atTop`
  respectively, then `f` is integrable.
* `MeasureTheory.LocallyIntegrable.integrable_of_isBigO_atTop_of_norm_eq_norm_neg`:
  If `f` is locally integrable, `‚Äñf(-x)‚Äñ = ‚Äñf(x)‚Äñ`, and `f =O[atTop] g` for some
  `g` integrable `atTop`, then `f` is integrable.
-/

open Asymptotics MeasureTheory Set Filter

variable {Œ± E F : Type*} [MeasurableSpace Œ±] [NormedAddCommGroup E] [NormedAddCommGroup F]
  {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {a b : Œ±} {Œº : Measure Œ±} {l : Filter Œ±}

variable [TopologicalSpace Œ±] [SecondCountableTopology Œ±]

namespace MeasureTheory

/-- If `f` is locally integrable, and `f =O[cocompact] g` for some `g` integrable at `cocompact`,
then `f` is integrable. -/
theorem LocallyIntegrable.integrable_of_isBigO_cocompact [IsMeasurablyGenerated (cocompact Œ±)]
    (hf : LocallyIntegrable f Œº) (ho : f =O[cocompact Œ±] g)
    (hg : IntegrableAtFilter g (cocompact Œ±) Œº) : Integrable f Œº := by
  refine integrable_iff_integrableAtFilter_cocompact.mpr ‚ü®ho.integrableAtFilter ?_ hg, hf‚ü©
  exact hf.aestronglyMeasurable.stronglyMeasurableAtFilter

section LinearOrder

variable [LinearOrder Œ±] [CompactIccSpace Œ±] {g' : Œ± ‚Üí F}

/-- If `f` is locally integrable, and `f =O[atBot] g`, `f =O[atTop] g'` for some
`g`, `g'` integrable at `atBot` and `atTop` respectively, then `f` is integrable. -/
theorem LocallyIntegrable.integrable_of_isBigO_atBot_atTop
    [IsMeasurablyGenerated (atBot (Œ± := Œ±))] [IsMeasurablyGenerated (atTop (Œ± := Œ±))]
    (hf : LocallyIntegrable f Œº)
    (ho : f =O[atBot] g) (hg : IntegrableAtFilter g atBot Œº)
    (ho' : f =O[atTop] g') (hg' : IntegrableAtFilter g' atTop Œº) : Integrable f Œº := by
  refine integrable_iff_integrableAtFilter_atBot_atTop.mpr
    ‚ü®‚ü®ho.integrableAtFilter ?_ hg, ho'.integrableAtFilter ?_ hg'‚ü©, hf‚ü©
  all_goals exact hf.aestronglyMeasurable.stronglyMeasurableAtFilter

/-- If `f` is locally integrable on `(‚àû, a]`, and `f =O[atBot] g`, for some
`g` integrable at `atBot`, then `f` is integrable on `(‚àû, a]`. -/
theorem LocallyIntegrableOn.integrableOn_of_isBigO_atBot [IsMeasurablyGenerated (atBot (Œ± := Œ±))]
    (hf : LocallyIntegrableOn f (Iic a) Œº) (ho : f =O[atBot] g)
    (hg : IntegrableAtFilter g atBot Œº) : IntegrableOn f (Iic a) Œº := by
  refine integrableOn_Iic_iff_integrableAtFilter_atBot.mpr ‚ü®ho.integrableAtFilter ?_ hg, hf‚ü©
  exact ‚ü®Iic a, Iic_mem_atBot a, hf.aestronglyMeasurable‚ü©

/-- If `f` is locally integrable on `[a, ‚àû)`, and `f =O[atTop] g`, for some
`g` integrable at `atTop`, then `f` is integrable on `[a, ‚àû)`. -/
theorem LocallyIntegrableOn.integrableOn_of_isBigO_atTop [IsMeasurablyGenerated (atTop (Œ± := Œ±))]
    (hf : LocallyIntegrableOn f (Ici a) Œº) (ho : f =O[atTop] g)
    (hg : IntegrableAtFilter g atTop Œº) : IntegrableOn f (Ici a) Œº := by
  refine integrableOn_Ici_iff_integrableAtFilter_atTop.mpr ‚ü®ho.integrableAtFilter ?_ hg, hf‚ü©
  exact ‚ü®Ici a, Ici_mem_atTop a, hf.aestronglyMeasurable‚ü©

/-- If `f` is locally integrable, `f` has a top element, and `f =O[atBot] g`, for some
`g` integrable at `atBot`, then `f` is integrable. -/
theorem LocallyIntegrable.integrable_of_isBigO_atBot [IsMeasurablyGenerated (atBot (Œ± := Œ±))]
    [OrderTop Œ±] (hf : LocallyIntegrable f Œº) (ho : f =O[atBot] g)
    (hg : IntegrableAtFilter g atBot Œº) : Integrable f Œº := by
  refine integrable_iff_integrableAtFilter_atBot.mpr ‚ü®ho.integrableAtFilter ?_ hg, hf‚ü©
  exact hf.aestronglyMeasurable.stronglyMeasurableAtFilter

/-- If `f` is locally integrable, `f` has a bottom element, and `f =O[atTop] g`, for some
`g` integrable at `atTop`, then `f` is integrable. -/
theorem LocallyIntegrable.integrable_of_isBigO_atTop [IsMeasurablyGenerated (atTop (Œ± := Œ±))]
    [OrderBot Œ±] (hf : LocallyIntegrable f Œº) (ho : f =O[atTop] g)
    (hg : IntegrableAtFilter g atTop Œº) : Integrable f Œº := by
  refine integrable_iff_integrableAtFilter_atTop.mpr ‚ü®ho.integrableAtFilter ?_ hg, hf‚ü©
  exact hf.aestronglyMeasurable.stronglyMeasurableAtFilter

end LinearOrder

section LinearOrderedAddCommGroup

/-- If `f` is locally integrable, `‚Äñf(-x)‚Äñ = ‚Äñf(x)‚Äñ`, and `f =O[atTop] g`, for some
`g` integrable at `atTop`, then `f` is integrable. -/
theorem LocallyIntegrable.integrable_of_isBigO_atTop_of_norm_eq_norm_neg
    [LinearOrderedAddCommGroup Œ±] [CompactIccSpace Œ±] [IsMeasurablyGenerated (atTop (Œ± := Œ±))]
    [MeasurableNeg Œ±] [Œº.IsNegInvariant] (hf : LocallyIntegrable f Œº)
    (hsymm : norm ‚àò f =·µê[Œº] norm ‚àò f ‚àò Neg.neg) (ho : f =O[atTop] g)
    (hg : IntegrableAtFilter g atTop Œº) : Integrable f Œº := by
  refine (isEmpty_or_nonempty Œ±).casesOn (fun _ ‚Ü¶ ?_) (fun _ ‚Ü¶ ?_)
  ¬∑ exact integrableOn_univ.mp (by convert integrableOn_empty)
  let a := -|Classical.arbitrary Œ±|
  have h_int : IntegrableOn f (Ici a) Œº :=
    LocallyIntegrableOn.integrableOn_of_isBigO_atTop (hf.locallyIntegrableOn _) ho hg
  have h_map_neg : (Œº.restrict (Ici a)).map Neg.neg = Œº.restrict (Iic (-a)) := by
    rw [show Ici a = Neg.neg ‚Åª¬π' Iic (-a) by simp, ‚Üê measurableEmbedding_neg.restrict_map,
      Measure.map_neg_eq_self]
  have h_int_neg : IntegrableOn (f ‚àò Neg.neg) (Ici a) Œº := by
    refine h_int.congr' ?_ hsymm.restrict
    refine AEStronglyMeasurable.comp_aemeasurable ?_ measurable_neg.aemeasurable
    convert hf.aestronglyMeasurable.restrict
  replace h_int_neg := measurableEmbedding_neg.integrable_map_iff.mpr h_int_neg
  rewrite [h_map_neg] at h_int_neg
  refine integrableOn_univ.mp ?_
  convert integrableOn_union.mpr ‚ü®h_int_neg, h_int‚ü©
  exact (Set.Iic_union_Ici_of_le (by simp)).symm

end LinearOrderedAddCommGroup

namespace Asymptotics

section Uniformly

variable {Œπ : Type*} [MeasurableSpace Œπ] {f : Œπ √ó Œ± ‚Üí E} {s : Set Œπ} {Œº : Measure Œπ}

/-- Let `f : X x Y ‚Üí Z`. If as y ‚Üí l, f(x, y) = O(g(y)) uniformly on `s : Set X` of finite measure,
then f is eventually (as y ‚Üí l) integrable along `s`. -/
theorem IsBigO.eventually_integrableOn [Norm F]
    (hf : f =O[ùìü s √óÀ¢ l] fun (_i, x) ‚Ü¶ g x)
    (hfm : ‚àÄ·∂† x in l, AEStronglyMeasurable (fun i ‚Ü¶ f (i, x)) (Œº.restrict s))
    (hs : MeasurableSet s) (hŒº : Œº s < ‚ä§) :
    ‚àÄ·∂† x in l, IntegrableOn (fun i ‚Ü¶ f (i, x)) s Œº := by
  obtain ‚ü®C, hC‚ü© := hf.bound
  obtain ‚ü®t, htl, ht‚ü© := hC.exists_mem
  obtain ‚ü®u, hu, v, hv, huv‚ü© := Filter.mem_prod_iff.mp htl
  obtain ‚ü®w, hwl, hw‚ü© := hfm.exists_mem
  refine eventually_iff_exists_mem.mpr ‚ü®w ‚à© v, inter_mem hwl hv, fun x hx ‚Ü¶ ?_‚ü©
  haveI : IsFiniteMeasure (Œº.restrict s) :=
    ‚ü®by convert hŒº using 1; exact Measure.restrict_apply_univ s‚ü©
  refine Integrable.mono' (integrable_const (C * ‚Äñg x‚Äñ)) (hw x hx.1) ?_
  filter_upwards [MeasureTheory.self_mem_ae_restrict hs]
  intro y hy
  exact ht (y, x) <| huv ‚ü®hu hy, hx.2‚ü©

variable [NormedSpace ‚Ñù E] [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

/-- Let `f : X x Y ‚Üí Z`. If as y ‚Üí l, f(x, y) = O(g(y)) uniformly on `s : Set X` of finite measure,
then the integral of f along s is O(g(y)). -/
theorem IsBigO.set_integral_isBigO
    (hf : f =O[ùìü s √óÀ¢ l] fun (_i, x) ‚Ü¶ g x) (hs : MeasurableSet s) (hŒº : Œº s < ‚ä§)  :
    (fun x ‚Ü¶ ‚à´ i in s, f (i, x) ‚àÇŒº) =O[l] g := by
  obtain ‚ü®C, hC‚ü© := hf.bound
  obtain ‚ü®t, htl, ht‚ü© := hC.exists_mem
  obtain ‚ü®u, hu, v, hv, huv‚ü© := Filter.mem_prod_iff.mp htl
  refine isBigO_iff.mpr ‚ü®C * (Œº s).toReal, eventually_iff_exists_mem.mpr ‚ü®v, hv, fun x hx ‚Ü¶ ?_‚ü©‚ü©
  rewrite [mul_assoc, ‚Üê smul_eq_mul (a' := ‚Äñg x‚Äñ), ‚Üê MeasureTheory.Measure.restrict_apply_univ,
    ‚Üê integral_const, mul_comm, ‚Üê smul_eq_mul, ‚Üê integral_smul_const]
  refine (norm_integral_le_integral_norm _).trans <|
    integral_mono_of_nonneg (univ_mem' fun _ ‚Ü¶ norm_nonneg _) ?_ ?_
  ¬∑ haveI : IsFiniteMeasure (Œº.restrict s) :=
      ‚ü®by convert hŒº using 1; exact Measure.restrict_apply_univ s‚ü©
    exact integrable_const _
  ¬∑ filter_upwards [MeasureTheory.self_mem_ae_restrict hs]
    intro y hy
    rewrite [smul_eq_mul, mul_comm]
    exact ht (y, x) <| huv ‚ü®hu hy, hx‚ü©

end Uniformly

end Asymptotics
